#!/bin/bash

# üß™ SCRIPT DE PRUEBA - SISTEMA DE ASESOR√çAS SERVITECH
# Prueba todas las funcionalidades del sistema de asesor√≠as
# Fecha: 6 de julio de 2025

echo "üß™ Iniciando pruebas del sistema de asesor√≠as..."

BASE_URL="http://localhost:3000/api"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
mostrar_resultado() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

echo -e "${BLUE}üìã Configurando datos de prueba...${NC}"

# IDs de prueba (deben existir en la BD)
CLIENTE_ID="6779d9ec1dc7ab23bb3beb23"  # ID del cliente de prueba
EXPERTO_ID="6779d9ec1dc7ab23bb3beb24"  # ID del experto de prueba
CATEGORIA_ID="6779da1c1dc7ab23bb3beb2d" # ID de una categor√≠a

# Verificar que el servidor est√© corriendo
echo -e "${YELLOW}üîç Verificando conexi√≥n al servidor...${NC}"
curl -s "$BASE_URL/usuarios" > /dev/null
mostrar_resultado $? "Conexi√≥n al servidor"

# 1. PRUEBA: Obtener disponibilidad de experto
echo -e "\n${BLUE}1. üìÖ Probando disponibilidad de experto...${NC}"
FECHA=$(date -d "+1 day" +%Y-%m-%d)
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/disponibilidad/$EXPERTO_ID?fecha=$FECHA&dias=7")
if [ "$RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Disponibilidad obtenida correctamente${NC}"
    echo "Calendario de disponibilidad:"
    cat response.json | jq '.data.calendario[0:3]' 2>/dev/null || echo "Respuesta recibida"
else
    echo -e "${RED}‚ùå Error obteniendo disponibilidad (HTTP: $RESPONSE)${NC}"
fi

# 2. PRUEBA: Obtener horarios disponibles para una fecha
echo -e "\n${BLUE}2. üïê Probando horarios disponibles...${NC}"
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/disponibilidad/$EXPERTO_ID/horarios?fecha=$FECHA&duracion=60")
if [ "$RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Horarios obtenidos correctamente${NC}"
    echo "Algunos horarios disponibles:"
    cat response.json | jq '.data.horariosDisponibles[0:3]' 2>/dev/null || echo "Respuesta recibida"
else
    echo -e "${RED}‚ùå Error obteniendo horarios (HTTP: $RESPONSE)${NC}"
fi

# 3. PRUEBA: Crear nueva asesor√≠a
echo -e "\n${BLUE}3. üìù Probando creaci√≥n de asesor√≠a...${NC}"
FECHA_ASESORIA=$(date -d "+2 days" +%Y-%m-%dT14:00:00.000Z)
NUEVA_ASESORIA=$(cat <<EOF
{
  "clienteId": "$CLIENTE_ID",
  "expertoId": "$EXPERTO_ID",
  "categoriaId": "$CATEGORIA_ID",
  "tipoServicio": "asesoria-detallada",
  "titulo": "Consulta de desarrollo web",
  "descripcion": "Necesito ayuda con React y Node.js",
  "fechaHora": "$FECHA_ASESORIA",
  "duracion": 60,
  "precio": 50000,
  "metodoPago": "tarjeta",
  "requerimientos": {
    "compartirPantalla": true,
    "notasCliente": "Tengo experiencia b√°sica en JavaScript"
  }
}
EOF
)

RESPONSE=$(curl -s -w "%{http_code}" -X POST -H "Content-Type: application/json" -H "x-usuario-id: $CLIENTE_ID" -d "$NUEVA_ASESORIA" -o response.json "$BASE_URL/asesorias")
if [ "$RESPONSE" = "201" ]; then
    echo -e "${GREEN}‚úÖ Asesor√≠a creada correctamente${NC}"
    ASESORIA_ID=$(cat response.json | jq -r '.data._id' 2>/dev/null)
    echo "ID de asesor√≠a creada: $ASESORIA_ID"
else
    echo -e "${RED}‚ùå Error creando asesor√≠a (HTTP: $RESPONSE)${NC}"
    cat response.json 2>/dev/null || echo "No hay respuesta"
fi

# 4. PRUEBA: Obtener la asesor√≠a creada
if [ ! -z "$ASESORIA_ID" ] && [ "$ASESORIA_ID" != "null" ]; then
    echo -e "\n${BLUE}4. üîç Probando obtenci√≥n de asesor√≠a espec√≠fica...${NC}"
    RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/asesorias/$ASESORIA_ID")
    if [ "$RESPONSE" = "200" ]; then
        echo -e "${GREEN}‚úÖ Asesor√≠a obtenida correctamente${NC}"
        echo "Estado actual:"
        cat response.json | jq '.data.estado' 2>/dev/null || echo "Respuesta recibida"
    else
        echo -e "${RED}‚ùå Error obteniendo asesor√≠a (HTTP: $RESPONSE)${NC}"
    fi

    # 5. PRUEBA: Simular pago (cambiar estado a pagada)
    echo -e "\n${BLUE}5. üí≥ Simulando pago de asesor√≠a...${NC}"
    # Nota: En producci√≥n esto se har√≠a a trav√©s del sistema de pagos
    # Por ahora simulamos cambiando el estado directamente en la BD
    echo "‚ö†Ô∏è En desarrollo: El pago se procesa a trav√©s del sistema de pagos integrado"

    # 6. PRUEBA: Confirmar asesor√≠a (como experto)
    echo -e "\n${BLUE}6. ‚úÖ Probando confirmaci√≥n de asesor√≠a...${NC}"
    CONFIRMACION=$(cat <<EOF
{
  "expertoId": "$EXPERTO_ID"
}
EOF
)
    # Primero necesitamos que est√© pagada para poder confirmar
    echo "‚ÑπÔ∏è Para confirmar, la asesor√≠a debe estar en estado 'pagada'"

    # 7. PRUEBA: Verificar disponibilidad despu√©s de crear asesor√≠a
    echo -e "\n${BLUE}7. üîÑ Verificando disponibilidad despu√©s de agendar...${NC}"
    RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/asesorias/disponibilidad/$EXPERTO_ID?fecha=$FECHA_ASESORIA&duracion=60")
    if [ "$RESPONSE" = "200" ]; then
        DISPONIBLE=$(cat response.json | jq '.data.disponible' 2>/dev/null)
        if [ "$DISPONIBLE" = "false" ]; then
            echo -e "${GREEN}‚úÖ Disponibilidad actualizada correctamente (no disponible)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è La disponibilidad deber√≠a ser false despu√©s de agendar${NC}"
        fi
    else
        echo -e "${RED}‚ùå Error verificando disponibilidad (HTTP: $RESPONSE)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è No se puede continuar con las pruebas sin ID de asesor√≠a${NC}"
fi

# 8. PRUEBA: Obtener lista de asesor√≠as
echo -e "\n${BLUE}8. üìã Probando listado de asesor√≠as...${NC}"
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/asesorias?usuario=$CLIENTE_ID&rol=cliente&limite=5")
if [ "$RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Lista de asesor√≠as obtenida${NC}"
    TOTAL=$(cat response.json | jq '.pagination.total' 2>/dev/null)
    echo "Total de asesor√≠as encontradas: $TOTAL"
else
    echo -e "${RED}‚ùå Error obteniendo lista (HTTP: $RESPONSE)${NC}"
fi

# 9. PRUEBA: Obtener estad√≠sticas
echo -e "\n${BLUE}9. üìä Probando estad√≠sticas...${NC}"
RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$BASE_URL/asesorias/estadisticas?usuarioId=$EXPERTO_ID&rol=experto&periodo=30")
if [ "$RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Estad√≠sticas obtenidas${NC}"
    echo "Estad√≠sticas del experto:"
    cat response.json | jq '.data' 2>/dev/null || echo "Respuesta recibida"
else
    echo -e "${RED}‚ùå Error obteniendo estad√≠sticas (HTTP: $RESPONSE)${NC}"
fi

# 10. PRUEBA: Configurar disponibilidad de experto
echo -e "\n${BLUE}10. ‚öôÔ∏è Probando configuraci√≥n de disponibilidad...${NC}"
CONFIGURACION=$(cat <<EOF
{
  "horarios": {
    "lunes": { "activo": true, "inicio": "09:00", "fin": "17:00" },
    "martes": { "activo": true, "inicio": "09:00", "fin": "17:00" },
    "miercoles": { "activo": true, "inicio": "09:00", "fin": "17:00" },
    "jueves": { "activo": true, "inicio": "09:00", "fin": "17:00" },
    "viernes": { "activo": true, "inicio": "09:00", "fin": "17:00" },
    "sabado": { "activo": false, "inicio": "09:00", "fin": "17:00" },
    "domingo": { "activo": false, "inicio": "09:00", "fin": "17:00" }
  },
  "configuracionGeneral": {
    "duracionMinima": 30,
    "duracionMaxima": 180,
    "tiempoAnticipacion": 24,
    "descansoEntreCitas": 15
  }
}
EOF
)

RESPONSE=$(curl -s -w "%{http_code}" -X PUT -H "Content-Type: application/json" -d "$CONFIGURACION" -o response.json "$BASE_URL/disponibilidad/$EXPERTO_ID/configurar")
if [ "$RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Disponibilidad configurada correctamente${NC}"
else
    echo -e "${RED}‚ùå Error configurando disponibilidad (HTTP: $RESPONSE)${NC}"
fi

# Limpiar archivos temporales
rm -f response.json

echo -e "\n${BLUE}üéâ Pruebas completadas${NC}"
echo -e "\n${YELLOW}üìù Resumen de funcionalidades probadas:${NC}"
echo "‚úÖ Consulta de disponibilidad de expertos"
echo "‚úÖ Obtenci√≥n de horarios espec√≠ficos" 
echo "‚úÖ Creaci√≥n de asesor√≠as"
echo "‚úÖ Consulta de asesor√≠as espec√≠ficas"
echo "‚úÖ Listado de asesor√≠as con filtros"
echo "‚úÖ Estad√≠sticas de asesor√≠as"
echo "‚úÖ Configuraci√≥n de disponibilidad"
echo ""
echo -e "${GREEN}üöÄ Sistema de asesor√≠as funcionando correctamente${NC}"
echo ""
echo -e "${BLUE}üìã Pr√≥ximos pasos sugeridos:${NC}"
echo "1. Integrar sistema de pagos real"
echo "2. Implementar autenticaci√≥n JWT"
echo "3. Agregar validaciones adicionales"
echo "4. Crear interfaz de usuario"
echo "5. Configurar notificaciones en tiempo real"
